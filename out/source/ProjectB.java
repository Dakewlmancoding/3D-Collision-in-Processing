/* autogenerated by Processing revision 1277 on 2022-03-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;
import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ProjectB extends PApplet {



//#### Var declaration ####//
  PShape mario;
  boolean marioMoving = false;
  float marioXChange = 0.0f;
  float marioYChange = 0.0f;
  float marioZChange = 0.0f;


  float marioX = 0.0f;
  float marioY = 0.0f;
  float marioZ = 0.0f;

  float marioTCornX;   // top corner pos. used for collision
  float marioTCornY;
  float marioTCornZ;

  float marioBCornX;   // bottom corner pos. used for collision
  float marioBCornY;
  float marioBCornZ;

  float oldMarioX;
  float oldMarioY;
  float oldMarioZ;

  Objects marioShadowBox = new Objects("hitBox", marioX, marioY, marioZ, 7.7009f, 3.29f, 28.1232f);

  float speedX = 0.0f;
  float speedY = 0.0f;
  float speedZ = 0.0f;

  Objects[] movingObjects = new Objects[0];


  float camX;
  float camY;
  float camZ;
  float camZoom = 750;


  //Note: all rotational values are stored in DEGREES

  float marioRot;
  float oldMarioRot;

  boolean cameraBypass = false;
  char cameraMode;
  float cameraRot;
  float oldCameraRot;
  float cameraYRot;

  SoundFile jump1;
  SoundFile jump2;
  SoundFile jump3;
  SoundFile jump4;
  int jumpIndex;
  SoundFile[] jumpSounds = new SoundFile[4];

  SoundFile spin;
  SoundFile launchSound;

  boolean w = false;
  boolean a = false;
  boolean s = false;
  boolean d = false;
  boolean q = false;
  boolean e = false;
  boolean r = false;
  boolean f = false;
  boolean space = false;
  boolean v = false;




  float G = 10;
  int jumpTimer;
  int jumpCooldown;
  int spinTimer;
  int spinCooldown;
  boolean landed;
  boolean spinning;

  boolean nearStar;
  boolean launching;
  boolean startLaunch = true;
  float initY = 0.0f; //the y value of mario when he starts a launch. I would make this local to launch(), but processing didn't like that

//#Animations#
int animFrame = 0;
  //Idle
    PShape idle1;
    PShape idle2;
    PShape idle3;
    PShape idle4;
    PShape idle5;
    PShape idle6;
    PShape idle7;
    PShape idle8;
    PShape idle9;
    PShape idle10;
    PShape idle11;
    PShape idle12;
    PShape idle13;
    PShape idle14;
    PShape idle15;
    PShape idle16;
    PShape idle17;
    PShape idle18;
    PShape idle19;
    PShape idle20;
    PShape idle21;
    PShape idle22;
    PShape idle23;
    PShape idle24;
    PShape idle25;
    PShape idle26;
    PShape idle27;
    PShape idle28;
    PShape idle29;
    PShape idle30;
    PShape idle31;
    PShape idle32;
    PShape idle33;
    PShape idle34;
    PShape idle35;
    PShape idle36;
    PShape idle37;
    PShape idle38;
    PShape idle39;
    PShape[] idle = {idle1, idle2,idle3,idle4,idle5,idle6,idle7,idle8,idle9,idle10,
                    idle11,idle12,idle13,idle14,idle15,idle16,idle17,idle18,idle19, idle20,
                    idle21,idle22,idle23,idle24,idle25,idle26,idle27,idle28,idle29, idle30,
                    idle31,idle32,idle33,idle34,idle35,idle36,idle37,idle38,idle39};

  //Run
      PShape run1;
      PShape run2;
      PShape run3;
      PShape run4;
      PShape run5;
      PShape run6;
      PShape run7;
      PShape run8;
      PShape run9;
      PShape run10;
      PShape run11;
      PShape run12;
      PShape run13;
      PShape run14;
      PShape run15;
      PShape run16;
      PShape run17;
      PShape run18;
      PShape run19;
      PShape run20;
      PShape run21;
      PShape run22;
      PShape run23;
      PShape run24;
      PShape run25;
      PShape run26;
      PShape run27;
      PShape run28;
      PShape run29;
      PShape run30;
      PShape run31;
      PShape run32;
      PShape run33;
      PShape run34;
      PShape run35;
      PShape run36;
      PShape run37;
      PShape run38;
      PShape run39;
      PShape[] run = {run1, run2,run3,run4,run5,run6,run7,run8,run9,run10,
                      run11,run12,run13,run14,run15,run16,run17,run18,run19, run20,
                      run21,run22,run23,run24,run25,run26,run27,run28,run29, run30,
                      run31,run32,run33,run34,run35,run36,run37,run38,run39};
//for easy copy/paste
//Objects <name> = new Objects("box", 100, 100, 100, 100, 100, 100);

//#Test Group#

  Objects test1 = new Objects("box", 0.003673f, 11.6748f, -8.37254f, 110.039f, 186.413f, 15.5487f);
  Objects test2 = new Objects("box", 0.182399f, 24.7541f, 3.53377f, 14.5823f, 9.99141f, 9.18803f);
  Objects test3 = new Objects("box", 0.182399f, 40.421f, 3.53377f, 14.5823f, 9.99141f, 9.18803f);
  Objects test4 = new Objects("box", -1.36427f, 52.5785f, 12.5708f, 14.5823f, 9.99141f, 9.18803f);
  float[] testCurve1 = {42.0196f,16.5597f,2.44069f,45.4579f,11.5769f,2.44071f,35.1067f,-14.6958f,14.6927f,41.7526f,-14.6958f,14.6927f};
  Objects testCurveOne = new Objects("movingBox", 150, testCurve1, 5,5,5);
  float[] testCurve2 = {-22.5829f,-17.8184f,2.98554f,-14.8469f, -17.8184f, 2.98554f, 16.097f, -17.8184f, 2.98554f, 31.569f,-17.8184f, 2.98554f};
  Objects testCurveTwo = new Objects("movingBox", 100, testCurve2, 4.32778f, 8.52696f,4.59402f);
  Objects testStar = new Objects("launch", -1.132f, 53.1824f, 16.9873f);     //BUILD testStar
  SoundFile testMusic;
  PImage testBack;
  Objects[] testGroup = {test1, test2, test3, test4,testCurveTwo,testCurveOne, testStar}; 
  Levels testLevel;

//#Yoshi Tower#
  //X = width, Y = height, Z = depth
  Objects tow1 = new Objects("box", 0, 11.675f, -8.3725f, 15.5f, 29.5f, 15.5f);
  Objects tow2 = new Objects("box", 1.6982f, 9.0965f, -5.581f, 11.8f, 3.81f, 11.8f);
  Objects tow3 = new Objects("box", 4.92077f, 18.0965f, -3.04419f, 11.7645f, 17.571f, 11.7645f);
  Objects tow4 = new Objects("box", 0.984781f, 19.7397f, -1.95949f, 11.7645f, 17.571f, 11.7645f);    
  Objects tow5 = new Objects("box", 1.35497f, 19.1366f, 12.6342f, 5.24807f, 12.0259f, 20.6993f);    
  Objects tow6 = new Objects("box", -4.79657f, 21.1158f, -3.04419f, 11.7645f, 17.571f, 11.7645f);
  Objects tow7 = new Objects("box", -2.65956f, 17.9413f, 7.33798f, 9.86924f, 12.01f, 8.04122f);
  Objects tow8 = new Objects("box", -9.4971f, 14.4925f, 5.87824f, 3.9721f, 3.9721f, 7.24432f);
  Objects tow9 = new Objects("box", -9.4971f, 17.3884f, 4.24213f, 3.59f, 3.59f, 3.59f);
  Objects tow10 = new Objects("box", -3.04438f, 23.7918f, 10.6162f, 9.86924f, 8.834f, 2.07366f);
  Objects tow11 = new Objects("box", 1.13994f, 24.9634f, 10.7757f, 9.86924f, 8.834f, 2.07366f);
  Objects tow12 = new Objects("box", -0.645548f, 26.9386f, 12.3976f, 3.9721f, 3.9721f, 3.60936f);
  Objects tow13 = new Objects("box", 2.65928f, 27.81f, 12.7441f, 3.9721f, 3.9721f, 3.60936f);
  Objects tow14 = new Objects("box", 6.73864f, 26.0777f, 12.7441f, 3.9721f, 7.43675f, 3.60936f);
  Objects tow15 = new Objects("box", 5.87913f, 15.8577f, 12.1789f, 9.86924f, 8.834f, 2.07366f);
  Objects tow16 = new Objects("box", 4.51564f, 13.0821f, 13.2832f, 3.9721f, 7.43675f, 3.60936f);
  Objects tow17 = new Objects("box", 0.337337f, 13.2516f, 15.6335f, 3.9721f, 7.43675f, 3.60936f);
  Objects tow18 = new Objects("box", -3.99736f, 14.3092f, 18.1363f, 3.9721f, 7.43675f, 3.60936f);
  Objects tow19 = new Objects("box", -9.62054f, 11.2886f, 20.2176f, 3.9721f, 7.43675f, 3.60936f);
  Objects tow20 = new Objects("box", 0.065676f, 18.814f, 23.6953f, 9.86924f, 15.3642f, 2.16442f);
  Objects tow21 = new Objects("box", 1.74007f, 26.0037f, -3.12165f, 17.8132f, 17.571f, 11.7645f);
  Objects yoshiStar = new Objects("launch", 0, 18.5143f, 24.797f);                     //build yoshiStar
  SoundFile yoshiMusic;
  Objects[] yoshiGroup = {tow1, tow2, tow3, tow4, tow5, tow6, tow7, tow8, tow9, 
  tow10, tow11, tow12, tow13, tow14, tow15, tow16, tow17, tow18, tow19, 
  tow20, tow21, yoshiStar}; 
  PImage yoshiBack;
  Levels yoshiLevel;

//#Lava Planet#
  Objects lava1 = new Objects("box", -4.71977f, -0.129812f, -1.85f, 40.4008f, 39.2628f, 0.961816f); 
  Objects lava2 = new Objects("box", 10.8446f, 11.4511f, -1.85f, 33.4494f, 39.2628f, 0.961816f);
  Objects lava3 = new Objects("box", -45.1386f, -37.8252f, -1.85f, 40.4008f, 35.7419f, 0.961816f);
  Objects lava4 = new Objects("box", -14.9219f, -29.8474f, -1.85f, 20, 20, 1.0516f);
  Objects lava5 = new Objects("box", -20.5514f, -44.838f, -1.85f, 10, 10, 1.0516f);
  Objects lava6 = new Objects("box", 0.204794f, -24.6565f, -1.85f, 10, 10, 1.0516f);
  Objects lava7 = new Objects("box", -29.2583f, -4.44803f, -1.85f, 10, 32.0332f, 1.0516f);
  Objects lava8 = new Objects("box", -70.4664f, -37.8252f, -1.85f, 10, 35.7419f, 0.961816f);
  Objects lava9 = new Objects("box", -101.822f, -34.9526f, -1.85f, 10, 35.7419f, 0.961816f);
  Objects lava10 = new Objects("box", -78.7624f, -50.2339f, -1.85f, 40, 10, 0.961816f);
  Objects lava11 = new Objects("box", -54.7092f, -56.6258f, -1.85f, 40, 10, 0.961816f);
  Objects lava12 = new Objects("box", -78.7624f, -22.342f, -1.85f, 40, 10, 0.961816f);
  Objects lava13 = new Objects("box", -86.0451f, 4.73348f, -1.85f, 26.7f, 45.8759f, 0.961816f);
  Objects lava14 = new Objects("box", -111.93f, -34.3887f, -1.85f, 19.1878f, 22.3f, 0.961816f);
  Objects lava15 = new Objects("box", -126.623f, -16.6286f, -1.85f, 10, 35.7419f, 0.961816f);
  Objects lava16 = new Objects("box", -134.126f, -7.65121f, -1.85f, 4.97773f, 35.7419f, 0.961816f);
  Objects lava17 = new Objects("box", -123.045f, 9.58242f, -1.85f, 17.3394f, 17.8309f, 1.0516f);
  Objects lava18 = new Objects("box", -39.2982f, -14.7415f, -1.85f, 10, 10, 1.0516f);
  Objects lava19 = new Objects("box", -77.3965f, 38.5977f, -1.85f, 10, 22.5863f, 1.0516f);
  Objects lava20 = new Objects("box", -84.3353f, 32.2577f, -1.85f, 10, 10, 1.0516f);
  Objects lava21 = new Objects("box", -108.092f, 9.58242f, -1.85f, 17.3394f, 17.8309f, 1.0516f);
  Objects lava22 = new Objects("box", -77.4061f, 59.6161f, -0.285429f, 16.6271f, 11.2481f, 3.89333f);
  Objects lava23 = new Objects("box", -116.98f, 70.978f, -0.552925f, 17.3394f, 10.4901f, 3.64575f);
  Objects lava24 = new Objects("box", -71.0995f, 42.1676f, -0.285429f, 7.38549f, 25.1799f, 3.89333f);
  Objects lava25 = new Objects("box", -73.9705f, 17.3411f, -0.285429f, 7.38549f, 25.1799f, 3.89333f);
  Objects lava26 = new Objects("box", -73.9705f, -7.72383f, -0.285429f, 7.38549f, 25.1799f, 3.89333f);
  Objects lava27 = new Objects("box", -76.3439f, 3.98437f, -0.285429f, 7.38549f, 25.1799f, 3.89333f);
  Objects lava28 = new Objects("box", -30.1782f, 7.10628f, -0.285429f, 7.38549f, 11.184f, 3.89333f);
  Objects lava29 = new Objects("box", -35.4855f, -3.99416f, -0.285429f, 7.38549f, 11.184f, 3.89333f);
  Objects lava30 = new Objects("box", -26.5137f, 18.1421f, -0.285429f, 7.38549f, 11.184f, 3.89333f);
  Objects lava31 = new Objects("box", -41.0094f, -14.4551f, -0.285429f, 7.38549f, 11.184f, 3.89333f);
  Objects lava32 = new Objects("box", -61.5949f, -23.2146f, -0.285429f, 19.4927f, 11.184f, 3.89333f);
  Objects lava33 = new Objects("box", -48.3141f, -20.9928f, -0.285429f, 7.38549f, 11.184f, 3.89333f);
  Objects lava34 = new Objects("box", -91.6058f, 83.7355f, 0.528816f, 16.4809f, 18.0508f, 5.52182f);
  Objects lava35 = new Objects("box", -127.247f, 60.716f, -0.552925f, 21.2194f, 10.4901f, 3.64575f);
  Objects lava36 = new Objects("box", -128.588f, 50.2069f, -0.552925f, 17.3394f, 10.4901f, 3.64575f);
  Objects lava37 = new Objects("box", -144.426f, 57.49f, -1.85f, 17.3394f, 25.2949f, 1.0516f);
  Objects lava38 = new Objects("box", -107.846f, 85.1554f, 0.528816f, 16.4809f, 18.0508f, 5.52182f);
  Objects lava39 = new Objects("box", -124.117f, 82.5438f, 0.528816f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava40 = new Objects("box", -133.372f, 72.0352f, 0.528816f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava41 = new Objects("box", -138.739f, 106.326f, 2.16623f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava42 = new Objects("box", -145.981f, 100.46f, 2.16623f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava43 = new Objects("box", -160.74f, 90.428f, 2.16623f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava44 = new Objects("box", -153.498f, 96.2934f, 2.16623f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava45 = new Objects("box", -171.957f, 129.57f, 2.45868f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava46 = new Objects("box", -179.199f, 123.705f, 2.45868f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava47 = new Objects("box", -164.439f, 133.737f, 2.45868f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava48 = new Objects("box", -157.197f, 139.602f, 2.45868f, 16.4809f, 12.8355f, 5.52182f);
  Objects lava49 = new Objects("box", -161.836f, 112.568f, -3.12095f, 29.3597f, 12.8355f, 5.52182f);
  Objects lava50 = new Objects("box", -137.522f, 154.319f, 1.54363f, 13.3871f, 12.8355f, 16.3494f);
  Objects lava51 = new Objects("box", -130.968f, 177.081f, -1.1948f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava52 = new Objects("box", -130.968f, 189.965f, 1.43671f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava53 = new Objects("box", -126.823f, 215.346f, 8.78895f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava54 = new Objects("box", -126.823f, 202.462f, 6.15745f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava55 = new Objects("box", -113.379f, 219.757f, 13.2902f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava56 = new Objects("box", -113.379f, 232.64f, 15.9217f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava57 = new Objects("box", -86.0451f, 246.473f, -1.85f, 26.7f, 24.1198f, 0.961816f);
  Objects lava58 = new Objects("box", -112.688f, 253.178f, -1.85f, 26.7f, 24.1198f, 0.961816f);
  Objects lava59 = new Objects("box", -111.5f, 259.697f, 1.60838f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava60 = new Objects("box", -99.4413f, 271.741f, 1.60838f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava61 = new Objects("box", -87.1499f, 260.918f, -2.58118f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava62 = new Objects("box", -99.2087f, 248.873f, -2.58118f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava63 = new Objects("box", -99.2087f, 259.284f, -0.791054f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava64 = new Objects("box", -113.184f, 284.021f, 6.38449f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava65 = new Objects("box", -113.184f, 273.609f, 4.59437f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava66 = new Objects("box", -101.125f, 285.654f, 4.59437f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava67 = new Objects("box", -113.416f, 296.478f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava68 = new Objects("box", -125.475f, 284.433f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava69 = new Objects("box", -126.294f, 271.499f, 6.38449f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava70 = new Objects("box", -147.817f, 260.071f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava71 = new Objects("box", -135.758f, 272.116f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava72 = new Objects("box", -136.316f, 281.796f, 8.78393f, 8.87984f, 6.8161f, 9.99288f);
  Objects lava73 = new Objects("box", -146.646f, 269.634f, 8.78393f, 8.87984f, 6.8161f, 9.99288f);
  Objects lava74 = new Objects("box", -124.469f, 294.284f, 8.78393f, 8.87984f, 6.8161f, 9.99288f);
  Objects lava75 = new Objects("box", -124.722f, 265.553f, 1.60838f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava76 = new Objects("box", -139.344f, 259.094f, -1.85f, 26.7f, 24.1198f, 0.961816f);
  Objects lava77 = new Objects("box", -100.53f, 309.068f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava78 = new Objects("box", -100.53f, 296.542f, 8.78393f, 13.3871f, 12.8355f, 9.99288f);
  Objects lava79 = new Objects("box", -97.2631f, 315.836f, 26.9726f, 13.3871f, 12.8355f, 67.852f);
  Objects lava80 = new Objects("box", -83.9802f, 315.836f, 26.9726f, 13.3871f, 12.8355f, 67.852f);
  Objects lava81 = new Objects("box", -70.9696f, 309.241f, 26.9726f, 13.3871f, 12.8355f, 67.852f);
  Objects lava82 = new Objects("box", -91.3075f, 310.878f, 26.9726f, 13.3871f, 12.8355f, 67.852f);
  Objects lava83 = new Objects("box", -91.394f, 326.553f, 26.9726f, 13.3871f, 12.8355f, 67.852f);
  Objects lava84 = new Objects("box", -79.584f, 296.158f, -9.13103f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava85 = new Objects("box", -69.2875f, 286.401f, 2.46789f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava86 = new Objects("box", -74.0358f, 287.979f, -3.56384f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava87 = new Objects("box", -62.2125f, 280.257f, 7.42775f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava88 = new Objects("box", -62.2125f, 280.257f, 7.42775f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava89 = new Objects("box", -59.8053f, 275.821f, 10.2201f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava90 = new Objects("box", -78.6301f, 336.594f, 28.3494f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava91 = new Objects("box", -78.5435f, 320.919f, 32.1308f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava92 = new Objects("box", -58.2056f, 319.282f, 35.218f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava93 = new Objects("box", -71.2163f, 319.497f, 35.218f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava94 = new Objects("box", -84.4992f, 325.877f, 28.3494f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava95 = new Objects("box", -76.0059f, 331.828f, 32.1308f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava96 = new Objects("box", -67.2768f, 331.928f, 35.218f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava97 = new Objects("box", -54.2661f, 331.713f, 35.218f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava98 = new Objects("box", -90.9442f, 335.245f, 28.3494f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava99 = new Objects("box", -93.4494f, 324.079f, 31.7183f, 13.3871f, 12.8355f, 67.852f);
  Objects lava100 = new Objects("box", -84.1992f, 303.142f, 53.3232f, 13.3871f, 12.8355f, 14.6781f);
  Objects lava101 = new Objects("box", -75.7322f, 303.664f, 53.6097f, 13.3871f, 12.8355f, 14.6781f);
  Objects lava102 = new Objects("box", -50.1432f, 326.215f, 31.0865f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava103 = new Objects("box", -52.6808f, 315.306f, 31.0865f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava104 = new Objects("box", -52.6808f, 315.306f, 31.0865f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava105 = new Objects("box", -50.1432f, 326.215f, 31.0865f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava106 = new Objects("box", -37.0936f, 321.913f, 28.5593f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava107 = new Objects("box", -39.6312f, 311.004f, 28.5593f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava108 = new Objects("box", -26.8429f, 298.751f, 11.2064f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava109 = new Objects("box", -44.5837f, 293.084f, 8.53644f, 22.2222f, 23.9651f, 85.8356f);
  Objects lava110 = new Objects("box", -26.797f, 286.109f, 8.74439f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava111 = new Objects("box", -58.0191f, 301.567f, 8.57717f, 22.2222f, 23.9651f, 85.8356f);
  Objects lava112 = new Objects("box", -42.6204f, 270.945f, 8.4948f, 22.2222f, 23.9651f, 85.8356f);
  Objects lava113 = new Objects("box", -74.7684f, 285.047f, 48.1386f, 13.3871f, 12.8355f, 6.47867f);
  Objects lava114 = new Objects("box", -74.7684f, 296.441f, 50.66f, 13.3871f, 12.8355f, 12.8668f);
  Objects lava115 = new Objects("box", -3.30942f, 277.555f, 15.0182f, 27.8426f, 32.1748f, 85.8356f);
  Objects lava116 = new Objects("box", -26.7159f, 266.372f, 14.671f, 22.2222f, 23.9651f, 85.8356f);
  Objects lava117 = new Objects("box", -22.8596f, 283.964f, 14.6107f, 13.3871f, 12.8355f, 85.8356f);
  Objects lava118 = new Objects("box", -52.4843f, 270.176f, 19.7908f, 13.3871f, 12.8355f, 20.5869f);
  Objects lava119 = new Objects("box", -67.0704f, 286.977f, 36.4913f, 13.3871f, 12.8355f, 6.47867f);
  Objects lava120 = new Objects("box", -31.4428f, 193.259f, 4.81637f, 21.1559f, 23.532f, 9.99288f);

  float[] lava121Curve = {-42.7609f,178.682f,29.0631f,-23.9248f,170.64f,20.8816f,11.704f,138.466f,75.5133f,46.5767f,114.528f,75.5133f};
  Objects lava121 = new Objects("movingBox", 100, lava121Curve,21.1559f,23.532f,9.99288f);

  Objects lava125 = new Objects("box", -23.9248f, 177.131f, 17.7697f, 21.1559f, 23.532f, 3.79128f);

  Objects lava128 = new Objects("box", 2.16436f, 141.833f, 69.9756f, 21.1559f, 23.532f, 3.79128f);
  Objects lava129 = new Objects("box", 2.16436f, 131.319f, 94.5394f, 21.1559f, 8.78932f, 3.79128f);
  Objects lava130 = new Objects("box", 11.3968f, 133.031f, 87.4845f, 21.1559f, 8.78932f, 3.79128f);
  Objects lavaPlanet = new Objects("geom", "lavaPlanet.obj", 0, 0, 0, 288.125f, 132.385f, 380.638f);                 //BUILD lavaPlanet   
  Objects lavaStar = new Objects("launch", 0.550421f, 114.456f, 101.412f);                         //BUILD lavaStar
  Objects[] lavaGroup = {lava1, lava2, lava3, lava4, lava5, lava6, lava7, lava8, lava9,
  lava10, lava11, lava12, lava13, lava14, lava15, lava16, lava17, lava18, lava19, 
  lava20, lava21, lava22, lava23, lava24, lava25, lava26, lava27, lava28, lava29,
  lava30, lava31, lava32, lava33, lava34, lava35, lava36, lava37, lava38, lava39,
  lava40, lava41, lava42, lava43, lava44, lava45, lava46, lava47, lava48, lava49,
  lava50, lava51, lava52, lava53, lava54, lava55, lava56, lava57, lava58, lava59,
  lava60, lava61, lava62, lava63, lava64, lava65, lava66, lava67, lava68, lava69,
  lava70, lava71, lava72, lava73, lava74, lava75, lava76, lava77, lava78, lava79,
  lava80, lava81, lava82, lava83, lava84, lava85, lava86, lava87, lava88, lava89,
  lava90, lava91, lava92, lava93, lava94, lava95, lava96, lava97, lava98, lava99,
  lava100, lava101, lava102, lava103, lava104, lava105, lava106, lava107, lava108, lava109,
  lava110, lava111, lava112, lava113, lava114, lava115, lava116, lava117, lava118, lava119,
  lava120, lava121, lava125, lava128, lava129,
  lava130, lavaStar};
  PImage lavaBack;
  SoundFile lavaMusic;
  Levels lavaLevel;

//#Clockwork Level#
  Objects clock1 = new Objects("box", 0, 31.4303f, -13.0005f, 59.9529f, 64.8606f, 24.2434f);
  Objects clock2 = new Objects("box", 0, -6.27644f, -11.265f, 46.8942f, 11.8193f, 18.9628f);
  Objects clock3 = new Objects("box", -1.69414f, -18.7284f, -11.8133f, 23.8241f, 6.00465f, 9.63385f);
  Objects clock4 = new Objects("box", -1.69414f, -25.3886f, -18.44f, 23.8241f, 6.00465f, 9.63385f);
  Objects clock5 = new Objects("box", -20.4489f, -23.04f, -18.44f, 15.365f, 6.00465f, 9.63385f);
  Objects clock6 = new Objects("box", -20.4489f, -16.3799f, -11.8133f, 15.365f, 6.00465f, 9.63385f);
  Objects clock7 = new Objects("box", 38.9925f, 49.3675f, -4.22878f, 18.2238f, 41.3342f, 9.63385f);
  Objects clock8 = new Objects("box", 237.788f, 89.896f, 5.38781f, 529.213f, 40.8217f, 172.581f);
  Objects clock9 = new Objects("box", 38.9925f, 49.3675f, -4.22878f, 18.2238f, 41.3342f, 9.63385f);

  Objects clock10 = new Objects("box", 48.3161f, 56.9151f, 4.44024f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock11 = new Objects("box", 56.2728f, 56.9151f, 13.7381f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock12 = new Objects("box", 65.4937f, 56.9151f, 20.8444f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock13 = new Objects("box", 74.9065f, 56.9151f, 27.3431f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock14 = new Objects("box", 109.166f, 56.9151f, -6.14527f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock15 = new Objects("box", 99.7533f, 56.9151f, -12.644f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock16 = new Objects("box", 90.5324f, 56.9151f, -19.7502f, 9.29138f, 41.3342f, 9.63385f);
  Objects clock17 = new Objects("box", 82.5757f, 56.9151f, -29.0481f, 9.29138f, 41.3342f, 9.63385f);

  Objects clock18 = new Objects("box", 78.1957f, 62.8046f, -1.03862f, 17.1184f, 18.453f, 17.7493f);

  Objects clock19 = new Objects("box", 69.6868f, 62.8369f, 11.9601f, 17.1184f, 18.453f, 24.7749f);
  Objects clock20 = new Objects("box", 91.6009f, 62.8547f, -17.3987f, 27.0557f, 18.453f, 33.9945f);

  Objects clock21 = new Objects("box", 125.221f, 51.4134f, -2.20197f, 23.4182f, 34.2176f, 4.68685f);
  Objects clock22 = new Objects("box", 133.775f, 52.8781f, -12.4554f, 8.21596f, 34.2176f, 23.5506f);
  Objects clock23 = new Objects("box", 125.443f, 58.8686f, 4.18036f, 8.21596f, 18.6266f, 23.5506f);
  Objects clock24 = new Objects("box", 167.026f, 51.4134f, 5.72699f, 23.4182f, 34.2176f, 4.68685f);
  Objects clock25 = new Objects("box", 159.068f, 52.8781f, 13.0178f, 8.21596f, 34.2176f, 23.5506f);
  Objects clock26 = new Objects("box", 167.211f, 58.812f, -3.59525f, 8.21596f, 18.6266f, 23.5506f);
  Objects clock27 = new Objects("box", 143.493f, 59.7136f, 16.9855f, 8.21596f, 18.6266f, 6.14505f);
  Objects clock28 = new Objects("box", 182.546f, 65.5724f, -5.21998f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock29 = new Objects("box", 190.255f, 65.5724f, -0.837252f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock30 = new Objects("box", 196.827f, 65.5724f, 5.19824f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock31 = new Objects("box", 202.673f, 65.5724f, 9.77654f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock32 = new Objects("box", 213.441f, 65.5724f, -0.178329f, 20.1138f, 50.3157f, 37.7824f);
  Objects clock33 = new Objects("box", 224.792f, 52.3114f, -27.7801f, 15.5928f, 50.3157f, 37.7824f);
  Objects clock34 = new Objects("box", 238.772f, 57.1103f, -19.0406f, 15.5928f, 50.3157f, 14.3971f);
  Objects clock35 = new Objects("box", 234.634f, 60.5262f, -2.74986f, 26.4231f, 50.3157f, 14.3971f);
  Objects clock36 = new Objects("box", 230.052f, 61.9855f, 1.58411f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock37 = new Objects("box", 230.052f, 61.9855f, 6.60506f, 13.3454f, 19.5847f, 12.2088f);
  Objects clock38 = new Objects("box", 242.806f, 61.9855f, 3.38069f, 13.3454f, 50.3157f, 12.2088f);
  Objects clock39 = new Objects("box", 259.447f, 61.9855f, 0.393223f, 20.9938f, 50.3157f, 6.50724f);
  Objects clock40 = new Objects("box", 300.721f, 60.1943f, -1.92511f, 38.8131f, 28.3557f, 6.50724f);
  Objects clock41 = new Objects("box", 345.854f, 60.1943f, -1.92511f, 38.8131f, 28.3557f, 6.50724f);
  Objects clock42 = new Objects("box", 277.208f, 47.6056f, -3.39058f, 7.67025f, 32.6577f, 24.5229f);
  Objects clock43 = new Objects("box", 323.252f, 47.6056f, -3.39058f, 7.67025f, 32.6577f, 24.5229f);
  Objects clock44 = new Objects("box", 369.392f, 47.6056f, -3.39058f, 7.67025f, 32.6577f, 24.5229f);
  Objects clock45 = new Objects("box", 323.343f, 56.7455f, -71.6027f, 46.5241f, 34.0859f, 6.50724f);
  Objects clock46 = new Objects("box", 330.211f, 41.4412f, -72.0517f, 28.1273f, 34.0859f, 6.50724f);
  Objects clock47 = new Objects("box", 338.134f, 63.7816f, -64.7024f, 15.3174f, 18.65f, 7.49611f);
  Objects clock48 = new Objects("box", 307.664f, 63.7816f, -64.7024f, 15.3174f, 18.65f, 7.49611f);
  Objects clock49 = new Objects("box", 323.415f, 49.2842f, -48.3687f, 23.1743f, 34.0859f, 8.33978f);
  Objects clock50 = new Objects("box", 323.415f, 49.2842f, 43.6782f, 23.1743f, 34.0859f, 8.33978f);
  Objects clock51 = new Objects("box", 323.252f, 55.3901f, 31.9962f, 7.67025f, 18.6516f, 14.7878f);
  Objects clock52 = new Objects("box", 323.252f, 55.3901f, -36.939f, 7.67025f, 18.6516f, 14.7878f);
  Objects clock53 = new Objects("box", 582.559f, 44.3989f, -3.76389f, 12.5549f, 53.4552f, 40.1399f);
  Objects clock54 = new Objects("box", 507.036f, 44.3989f, -3.76389f, 12.5549f, 53.4552f, 40.1399f);
  Objects clock55 = new Objects("box", 431.67f, 44.3989f, -3.76389f, 12.5549f, 53.4552f, 40.1399f);
  Objects clock56 = new Objects("box", 544.031f, 57.9027f, -1.36516f, 63.5304f, 17.0267f, 10.6512f);
  Objects clock57 = new Objects("box", 470.156f, 52.6927f, -0.52913f, 63.5304f, 46.4135f, 10.6512f);
  Objects clock58 = new Objects("box", 470.156f, 54.4917f, -93.6698f, 63.5304f, 30.0329f, 7.67949f);
  Objects clock59 = new Objects("box", 443.364f, 49.3609f, -85.5932f, 28.1273f, 49.2435f, 6.50724f);
  Objects clock60 = new Objects("box", 490.817f, 49.3609f, -93.6604f, 28.1273f, 49.2435f, 6.50724f);
  Objects clock61 = new Objects("box", 434.489f, 61.6223f, -78.7235f, 15.3174f, 18.65f, 7.49611f);
  Objects clock62 = new Objects("box", 467.439f, 64.3308f, -86.3294f, 15.3174f, 18.65f, 7.49611f);
  Objects clock63 = new Objects("box", 467.439f, 64.3308f, -86.3294f, 15.3174f, 18.65f, 7.49611f);
  Objects clock64 = new Objects("box", 497.158f, 64.3308f, -86.3294f, 15.3174f, 18.65f, 7.49611f);
  Objects clock65 = new Objects("box", 420.838f, 54.3549f, -85.868f, 15.3174f, 27.8607f, 7.49611f);
  Objects clock66 = new Objects("box", 399.101f, 47.9271f, 4.31923f, 37.8376f, 49.2435f, 6.50724f);
  Objects clockStar = new Objects("launch", 582.875f, 21.9741f, 16.4091f);                         //BUILD clockStar
  Objects[] clockGroup = {clock1, clock2, clock3, clock4, clock5, clock6, clock7, clock8, clock9,
  clock10, clock11, clock12, clock13, clock14, clock15, clock16, clock17, clock18, clock19,
  clock20, clock21, clock22, clock23, clock24, clock25, clock26, clock27, clock28, clock29,
  clock30, clock31, clock32, clock33, clock34, clock35, clock36, clock37, clock38, clock39,
  clock40, clock41, clock42, clock43, clock44, clock45, clock46, clock47, clock48, clock49,
  clock50, clock51, clock52, clock53, clock54, clock55, clock56, clock57, clock58, clock59,
  clock60, clock61, clock62, clock63, clock64, clock65, clock66, clockStar};
  PImage clockBack;
  SoundFile clockMusic;
  Levels clockLevel;

//#Desert Planet#
  Objects dune1 = new Objects("box", 0, 0, -5.73098f, 32.5611f, 16.1857f, 10.5469f);
  Objects dune2 = new Objects("box", 123.671f, -319.464f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune3 = new Objects("box", 123.671f, -382.095f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune4 = new Objects("box", 95.1753f, -350.523f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune5 = new Objects("box", 153.501f, -350.523f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune6 = new Objects("box", -98.1137f, -350.523f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune7 = new Objects("box", -156.439f, -350.523f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune8 = new Objects("box", -127.944f, -382.095f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune9 = new Objects("box", -127.944f, -319.464f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune10 = new Objects("box", -0.136345f, -17.889f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune11 = new Objects("box", -0.136345f, -80.5199f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune12 = new Objects("box", -28.632f, -48.9485f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune13 = new Objects("box", 29.6936f, -48.9485f, -5.73098f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune14 = new Objects("box", 55.3204f, -17.889f, -5.73098f, 67.6475f, 22.4739f, 10.5469f);
  Objects dune15 = new Objects("box", 55.3204f, -40.4411f, -5.73098f, 40.8896f, 22.4739f, 10.5469f);
  Objects dune16 = new Objects("box", 93.5768f, -25.1559f, -3.38799f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune17 = new Objects("box", 103.166f, -30.9432f, -2.08173f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune18 = new Objects("box", 132, -44.2679f, -7.00978f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune19 = new Objects("box", 117.996f, -44.2679f, -7.00978f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune20 = new Objects("box", 120.049f, -66.8766f, -7.00978f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune21 = new Objects("box", 108.623f, -85.052f, -3.32956f, 23.0631f, 22.4739f, 13.9328f);
  Objects dune22 = new Objects("box", 95.3737f, -98.79f, -5.91937f, 13.4635f, 13.7556f, 35.5322f);
  Objects dune23 = new Objects("box", 99.9241f, -105.123f, -5.9366f, 13.4635f, 13.7556f, 35.5322f);
  Objects dune24 = new Objects("box", 108.634f, -102.618f, -10.0396f, 13.4635f, 13.7556f, 27.5605f);
  Objects dune25 = new Objects("box", 108.634f, -111.488f, -10.0396f, 13.4635f, 13.7556f, 27.5605f);
  Objects dune26 = new Objects("box", 114.854f, -121.031f, -10.3059f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune27 = new Objects("box", 117.423f, -132.096f, -10.6704f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune28 = new Objects("box", 120.073f, -143.049f, -10.8433f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune29 = new Objects("box", 124.685f, -150.44f, -10.8485f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune30 = new Objects("box", 128.461f, -161.234f, -10.9746f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune31 = new Objects("box", 132.78f, -141.76f, -11.8441f, 24.3727f, 15.519f, 27.5605f);
  Objects dune32 = new Objects("box", 151.097f, -134.593f, -13.7705f, 13.4635f, 13.7556f, 22.2156f);
  Objects dune33 = new Objects("box", 164.401f, -146.847f, -13.7705f, 13.4635f, 13.7556f, 22.2156f);
  Objects dune34 = new Objects("box", 155.43f, -146.847f, -13.7705f, 13.4635f, 13.7556f, 22.2156f);
  Objects dune35 = new Objects("box", 164.401f, -137.784f, -13.7705f, 13.4635f, 13.7556f, 22.2156f);
  Objects dune36 = new Objects("box", 177.338f, -137.784f, -13.7705f, 13.4635f, 13.7556f, 22.2156f);
  Objects dune37 = new Objects("box", 185.339f, -132.781f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune38 = new Objects("box", 194.418f, -127.884f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune39 = new Objects("box", 202.179f, -123.88f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune40 = new Objects("box", 169.967f, -88.4678f, -7.40543f, 23.0631f, 22.4739f, 10.5469f);
  Objects dune41 = new Objects("box", 174.514f, -102.258f, -9.50093f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune42 = new Objects("box", 182.047f, -96.9336f, -9.50093f, 10.9801f, 11.2183f, 28.8542f);
  Objects dune43 = new Objects("box", 220.071f, -154.708f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune44 = new Objects("box", 212.31f, -158.712f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune45 = new Objects("box", 203.23f, -163.609f, -13.4826f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune46 = new Objects("box", 218.265f, -202.401f, -12.2072f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune47 = new Objects("box", 227.345f, -197.504f, -12.2072f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune48 = new Objects("box", 235.106f, -193.5f, -12.2072f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune49 = new Objects("box", 192.765f, -233.063f, -9.39845f, 10.9801f, 19.7299f, 21.3519f);
  Objects dune50 = new Objects("box", 188.092f, -252.869f, -7.22663f, 10.9801f, 19.7299f, 21.3519f);
  Objects dune51 = new Objects("box", 200.48f, -249.693f, -11.1665f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune52 = new Objects("box", 200.48f, -260.525f, -7.07602f, 10.9801f, 11.2183f, 21.3519f);
  Objects dune53 = new Objects("box", 216.539f, -256.215f, -12.912f, 22.2751f, 19.7299f, 21.3519f);
  Objects dune54 = new Objects("box", 217.593f, -283.282f, -13.3735f, 10.9801f, 57.4273f, 21.3519f);
  Objects dune55 = new Objects("box", 201.104f, -303.363f, -13.3735f, 22.4663f, 10.2097f, 21.3519f);
  Objects dune56 = new Objects("box", 185.213f, -298.334f, -13.3735f, 22.4663f, 10.2097f, 21.3519f);
  Objects dune57 = new Objects("box", 179.314f, -307.018f, -13.3735f, 22.4663f, 10.2097f, 21.3519f);
  Objects dune58 = new Objects("box", 73.5889f, -422.948f, -5.73096f, 24.5014f, 42.2995f, 10.5469f);
  Objects dune59 = new Objects("box", 62.8739f, -388.686f, -5.73096f, 15.5273f, 42.2995f, 10.5469f);
  Objects dune60 = new Objects("box", 50.8635f, -367.175f, -5.73096f, 15.5273f, 22.8941f, 10.5469f);
  Objects dune61 = new Objects("box", 73.6564f, -383.946f, -5.73096f, 15.5273f, 22.8941f, 10.5469f);
  Objects dune62 = new Objects("box", 35.1975f, -368.278f, -5.73096f, 15.5273f, 22.8941f, 10.5469f);
  Objects dune63 = new Objects("box", 11.2875f, -422.918f, -5.73096f, 24.5014f, 21.3693f, 10.5469f);
  Objects dune64 = new Objects("box", 18.5547f, -443.442f, -5.73096f, 24.5014f, 21.3693f, 10.5469f);
  Objects dune65 = new Objects("box", 48.1086f, -444.863f, -5.73096f, 10.4979f, 12.2418f, 10.5469f);
  Objects dune66 = new Objects("box", 45.3325f, -433.033f, -2.28708f, 35.3444f, 12.2418f, 10.5469f);
  Objects dune67 = new Objects("box", 42.7217f, -424.844f, -8.33653f, 44.7983f, 12.2418f, 10.5469f);
  Objects dune68 = new Objects("box", 15.7103f, -395.778f, -3.09123f, 34.9098f, 23.972f, 12.2017f);
  Objects dune69 = new Objects("box", 13.978f, -372.815f, 0.708903f, 31.4452f, 21.3693f, 12.2017f);
  Objects dune70 = new Objects("box", -8.3938f, -375.133f, 0.708903f, 19.632f, 21.3693f, 12.2017f);
  Objects dune71 = new Objects("box", -36.959f, -369.171f, 0.708903f, 13.8041f, 21.3693f, 12.2017f);
  Objects dune72 = new Objects("box", -24.1572f, -371.989f, -10.1445f, 13.8041f, 21.3693f, 12.2017f);
  Objects dune73 = new Objects("box", -44.9125f, -384.858f, -2.23895f, 10.4979f, 12.2418f, 10.5469f);
  Objects dune74 = new Objects("box", -39.1369f, -408.478f, -8.33653f, 25.3421f, 7.60187f, 10.5469f);
  Objects dune75 = new Objects("box", -10.904f, -404.599f, -2.28708f, 35.3444f, 12.2418f, 10.5469f);
  Objects dune76 = new Objects("box", -24.5715f, -414.378f, -2.35192f, 10.196f, 30.5985f, 10.5469f);
  Objects dune77 = new Objects("box", -36.8554f, -416.368f, -2.9143f, 24.3613f, 10.29f, 10.5469f);
  Objects dune78 = new Objects("box", -53.1432f, -414.378f, -2.35192f, 10.196f, 22.1344f, 10.5469f);
  Objects dune79 = new Objects("box", -66.521f, -411.726f, -5.84073f, 21.911f, 22.1344f, 10.5469f);
  Objects dune80 = new Objects("box", -84.5335f, -400.975f, -5.84073f, 21.911f, 22.1344f, 10.5469f);
  Objects dune81 = new Objects("box", -84.5335f, -379.371f, -5.84073f, 21.911f, 22.1344f, 10.5469f);
  Objects dune82 = new Objects("box", -71.6102f, -365.252f, -5.84073f, 21.911f, 22.1344f, 10.5469f);
  Objects dune83 = new Objects("box", -83.2049f, -307.216f, -5.84073f, 27.9198f, 31.3742f, 10.5469f);
  Objects dune84 = new Objects("box", -64.6476f, -288.837f, -5.84073f, 27.9198f, 31.3742f, 10.5469f);
  Objects dune85 = new Objects("box", -49.529f, -274.829f, -5.84073f, 27.9198f, 31.3742f, 10.5469f);
  Objects dune86 = new Objects("box", -36.8375f, -261.643f, -5.84073f, 27.9198f, 31.3742f, 10.5469f);
  Objects dune87 = new Objects("box", 0.381115f, -226.092f, -5.84073f, 57.0016f, 63.6213f, 10.5469f);
  Objects duneStar = new Objects("launch", 0, -224.575f, 0);                         //BUILD lavaStar
  Objects[] duneGroup = {dune1, dune2, dune3, dune4, dune5, dune6, dune7, dune8, dune9,
  dune10, dune11, dune12, dune13, dune14, dune15, dune16, dune17, dune18, dune19, 
  dune20, dune21, dune22, dune23, dune24, dune25, dune26, dune27, dune28, dune29, 
  dune30, dune31, dune32, dune33, dune34, dune35, dune36, dune37, dune38, dune39, 
  dune40, dune41, dune42, dune43, dune44, dune45, dune46, dune47, dune48, dune49, 
  dune50, dune51, dune52, dune53, dune54, dune55, dune56, dune57, dune58, dune59, 
  dune60, dune61, dune62, dune63, dune64, dune65, dune66, dune67, dune68, dune69, 
  dune70, dune71, dune72, dune73, dune74, dune75, dune76, dune77, dune78, dune79, 
  dune80, dune81, dune82, dune83, dune84, dune85, dune86, dune87, duneStar};
  PImage duneBack;
  SoundFile duneMusic;
  Levels duneLevel;


Levels activeLevel;


//#### Init ####//
public void setup() {
  //shapeMode(CENTER);

  /* size commented out by preprocessor */;

  //Anim setup
      //Idle
        idle1 = loadShape("anims/idle/idle_000001.obj");
        idle[0] = idle1;
        idle2 = loadShape("anims/idle/idle_000002.obj");
        idle[1] = idle2;
        idle3 = loadShape("anims/idle/idle_000003.obj");
        idle[2] = idle3;
        idle4 = loadShape("anims/idle/idle_000004.obj");
        idle[3] = idle4;
        idle5 = loadShape("anims/idle/idle_000005.obj");
        idle[4] = idle5;
        idle6 = loadShape("anims/idle/idle_000006.obj");
        idle[5] = idle6;
        idle7 = loadShape("anims/idle/idle_000007.obj");
        idle[6] = idle7;
        idle8 = loadShape("anims/idle/idle_000008.obj");
        idle[7] = idle8;
        idle9 = loadShape("anims/idle/idle_000009.obj");
        idle[8] = idle9;
        idle10 = loadShape("anims/idle/idle_000010.obj");
        idle[9] = idle10;
        idle11 = loadShape("anims/idle/idle_000011.obj");
        idle[10] = idle11;
        idle12 = loadShape("anims/idle/idle_000012.obj");
        idle[11] = idle12;
        idle13 = loadShape("anims/idle/idle_000013.obj");
        idle[12] = idle13;
        idle14 = loadShape("anims/idle/idle_000014.obj");
        idle[13] = idle14;
        idle15 = loadShape("anims/idle/idle_000015.obj");
        idle[14] = idle15;
        idle16 = loadShape("anims/idle/idle_000016.obj");
        idle[15] = idle16;
        idle17 = loadShape("anims/idle/idle_000017.obj");
        idle[16] = idle17;
        idle18 = loadShape("anims/idle/idle_000018.obj");
        idle[17] = idle18;
        idle19 = loadShape("anims/idle/idle_000019.obj");
        idle[18] = idle19;
        idle20 = loadShape("anims/idle/idle_000020.obj");
        idle[19] = idle20;
        idle21 = loadShape("anims/idle/idle_000021.obj");
        idle[20] = idle21;
        idle22 = loadShape("anims/idle/idle_000022.obj");
        idle[21] = idle22;
        idle23 = loadShape("anims/idle/idle_000023.obj");
        idle[22] = idle23;
        idle24 = loadShape("anims/idle/idle_000024.obj");
        idle[23] = idle24;
        idle25 = loadShape("anims/idle/idle_000025.obj");
        idle[24] = idle25;
        idle26 = loadShape("anims/idle/idle_000026.obj");
        idle[25] = idle26;
        idle27 = loadShape("anims/idle/idle_000027.obj");
        idle[26] = idle27;
        idle28 = loadShape("anims/idle/idle_000028.obj");
        idle[27] = idle28;
        idle29 = loadShape("anims/idle/idle_000029.obj");
        idle[28] = idle29;
        idle30 = loadShape("anims/idle/idle_000030.obj");
        idle[29] = idle30;
        idle31 = loadShape("anims/idle/idle_000031.obj");
        idle[30] = idle31;
        idle32 = loadShape("anims/idle/idle_000032.obj");
        idle[31] = idle32;
        idle33 = loadShape("anims/idle/idle_000033.obj");
        idle[32] = idle33;
        idle34 = loadShape("anims/idle/idle_000034.obj");
        idle[33] = idle34;
        idle35 = loadShape("anims/idle/idle_000035.obj");
        idle[34] = idle35;
        idle36 = loadShape("anims/idle/idle_000036.obj");
        idle[35] = idle36;
        idle37 = loadShape("anims/idle/idle_000037.obj");
        idle[36] = idle37;
        idle38 = loadShape("anims/idle/idle_000038.obj");
        idle[37] = idle38;
        idle39 = loadShape("anims/idle/idle_000039.obj");
        idle[38] = idle39;
      
      //Run
          run1 = loadShape("anims/run/run_000001.obj");
          run[0] = run1;
          run2 = loadShape("anims/run/run_000002.obj");
          run[1] = run2;
          run3 = loadShape("anims/run/run_000003.obj");
          run[2] = run3;
          run4 = loadShape("anims/run/run_000004.obj");
          run[3] = run4;
          run5 = loadShape("anims/run/run_000005.obj");
          run[4] = run5;
          run6 = loadShape("anims/run/run_000006.obj");
          run[5] = run6;
          run7 = loadShape("anims/run/run_000007.obj");
          run[6] = run7;
          run8 = loadShape("anims/run/run_000008.obj");
          run[7] = run8;
          run9 = loadShape("anims/run/run_000009.obj");
          run[8] = run9;
          run10 = loadShape("anims/run/run_000010.obj");
          run[9] = run10;
          run11 = loadShape("anims/run/run_000011.obj");
          run[10] = run11;
          run12 = loadShape("anims/run/run_000012.obj");
          run[11] = run12;
          run13 = loadShape("anims/run/run_000013.obj");
          run[12] = run13;
          run14 = loadShape("anims/run/run_000014.obj");
          run[13] = run14;
          run15 = loadShape("anims/run/run_000015.obj");
          run[14] = run15;
          run16 = loadShape("anims/run/run_000016.obj");
          run[15] = run16;
          run17 = loadShape("anims/run/run_000017.obj");
          run[16] = run17;
          run18 = loadShape("anims/run/run_000018.obj");
          run[17] = run18;
          run19 = loadShape("anims/run/run_000019.obj");
          run[18] = run19;
          run20 = loadShape("anims/run/run_000020.obj");
          run[19] = run20;
          run21 = loadShape("anims/run/run_000021.obj");
          run[20] = run21;
          run22 = loadShape("anims/run/run_000022.obj");
          run[21] = run22;
          run23 = loadShape("anims/run/run_000023.obj");
          run[22] = run23;
          run24 = loadShape("anims/run/run_000024.obj");
          run[23] = run24;
          run25 = loadShape("anims/run/run_000025.obj");
          run[24] = run25;
          run26 = loadShape("anims/run/run_000026.obj");
          run[25] = run26;
          run27 = loadShape("anims/run/run_000027.obj");
          run[26] = run27;
          run28 = loadShape("anims/run/run_000028.obj");
          run[27] = run28;
          run29 = loadShape("anims/run/run_000029.obj");
          run[28] = run29;
          run30 = loadShape("anims/run/run_000030.obj");
          run[29] = run30;
          run31 = loadShape("anims/run/run_000031.obj");
          run[30] = run31;
          run32 = loadShape("anims/run/run_000032.obj");
          run[31] = run32;
          run33 = loadShape("anims/run/run_000033.obj");
          run[32] = run33;
          run34 = loadShape("anims/run/run_000034.obj");
          run[33] = run34;
          run35 = loadShape("anims/run/run_000035.obj");
          run[34] = run35;
          run36 = loadShape("anims/run/run_000036.obj");
          run[35] = run36;
          run37 = loadShape("anims/run/run_000037.obj");
          run[36] = run37;
          run38 = loadShape("anims/run/run_000038.obj");
          run[37] = run38;
          run39 = loadShape("anims/run/run_000039.obj");
          run[38] = run39;

  //camera setup
    beginCamera();
    camera();
    translate(marioX, marioY+200, marioZ-250);
    rotateX(radians(341));
    rotateY(PI);
    endCamera();

  //mario setup
    spin = new SoundFile(this, "audio/Mario18.wav"); 
    launchSound = new SoundFile(this, "audio/launchStar.wav"); 
    jump1 = new SoundFile(this, "audio/Mario38.wav");
    jump2 = new SoundFile(this, "audio/Mario39.wav");
    jump3 = new SoundFile(this, "audio/Mario40.wav");
    jump4 = new SoundFile(this, "audio/Mario41.wav");
    jumpSounds[0] = jump1;
    jumpSounds[1] = jump2;
    jumpSounds[2] = jump3;
    jumpSounds[3] = jump4;
    mario = loadShape("anims/idle/idle_000001.obj");
    pushMatrix();
    translate(marioX, marioY, marioZ);
    scale(100);
    rotateZ(PI);
    rotateY(PI);
    shape(mario);
    popMatrix();

  //Levels setup

    testStar.loadObj();
    testMusic = new SoundFile(this, "audio/testTheme.wav");
    testBack = loadImage("backgrounds/sky.png");
    testLevel = new Levels(testGroup, testMusic, testBack);

    yoshiStar.loadObj();
    yoshiMusic = new SoundFile(this, "audio/SMG_galaxy01_strm.wav");
    yoshiBack = loadImage("backgrounds/sky.png");
    yoshiLevel = new Levels(yoshiGroup, yoshiMusic, yoshiBack);

    lavaPlanet.loadObj();
    lavaStar.loadObj();
    lavaMusic = new SoundFile(this, "audio/SMG_galaxy02_strm.wav");
    lavaBack = loadImage("backgrounds/meltyMolten.jpg");
    lavaLevel = new Levels(lavaGroup, lavaMusic, lavaBack);

    clockStar.loadObj();
    clockMusic = new SoundFile(this, "audio/SMG2_galaxy01_multi.wav");
    clockBack = loadImage("backgrounds/clockwork.jpg");
    clockLevel = new Levels(clockGroup, clockMusic, clockBack);

    duneStar.loadObj();
    duneMusic = new SoundFile(this, "audio/SMG_galaxy19_strm.wav");
    duneBack = loadImage("backgrounds/clockwork.jpg");
    duneLevel = new Levels(duneGroup, duneMusic, duneBack);

    activeLevel = testLevel;
  
  frameRate(26);
}



//#### Main Loop ####//
public void draw() {
  // **misc**
    activeLevel.skybox.resize(width, height);
    background(activeLevel.skybox);
    lights();
    spotLight(255, 0, 0, marioX, marioY, marioZ, 0, 1, 0, 0, 500);


  //***Objects***
  movingObjects = activeLevel.loadLevel();


  if (launching) {
    launch();
    camX = marioX;
    camY = marioY-400;
    camZ = marioZ-750;
  } else {
    startLaunch = true; //this is somewhat confusingly named. It does not mean start a launch. It means is this the first frame of a launch
    //***Mario's Movement Controls***
      if (w) {
        //println("w key is pressed");
        move('w', activeLevel.objects);
      }if (a) {
        move('a', activeLevel.objects);
      }
      if (s) {
        move('s', activeLevel.objects);
      }
      if (d) {
        move('d', activeLevel.objects);
      }

      if (q) {
        marioRot -= 3;
        if (marioRot >= 360) {
          marioRot -= 360;
        } else if (marioRot <= -360) {
          marioRot += 360;
        }
      }
      if (e) {
        marioRot += 3;
        if (marioRot >= 360) {
          marioRot -= 360;
        } else if (marioRot <= -360) {
          marioRot += 360;
        }
      }


      if (space && jumpCooldown == 0) {
        println(jumpTimer);
        if (jumpTimer == 0){
          jumpCooldown = 20;
          println(jumpCooldown);
        }else{
          if (jumpTimer == 50) {
            jumpIndex = PApplet.parseInt(random(0, 3));
            jumpSounds[jumpIndex].play();
          }
        jumpTimer -= 1;
        move(' ', activeLevel.objects);
        }
      }else{
        if (gravity(activeLevel.objects)){
          jumpTimer = 50;
          jumpCooldown = 0;
          println("landed");
          landed = true;
        } else {
          landed = false;
        }
      }

    //spinning to fall slower and gain some added height. NYFI 
      if (v && spinCooldown == 0) {
        if (spinTimer == 0) {
          v = false;
          cameraBypass = false;
          spinCooldown = 10;
        }else {
          if (spinTimer == 8) {
            spin.play();
            //collision(activeLevel.objects, 0, 0, 0); //updates nearStar. I know this is a bit of a hack job...
            if (nearStar) {
              println("Wahooo!!");
              launching = true;
              nearStar = false;
            }
          }
          spinTimer -= 1;
          cameraBypass=true;;
          marioRot += 90;
          if (marioRot >= 360) {
          marioRot -= 360;
          } else if (marioRot <= -360) {
          marioRot += 360;
          }
        }
      }else {
        if (spinCooldown > 0) {
          println("spin cooldown", spinCooldown);
          spinCooldown -=1;
        }else {
          spinTimer = 8;
        }
      }

    }
  //*** Update Mario's Coords ***  
    objCollision(movingObjects);
    if (!collision(activeLevel.objects, marioXChange, 0, 0)){
      marioX += marioXChange;
    }
    if (!collision(activeLevel.objects, 0, marioYChange, 0)){
    }
      marioY += marioYChange;
    if (!collision(activeLevel.objects, 0, 0, marioZChange)){
      marioZ += marioZChange;
    }
    
    marioXChange = 0.0f;
    marioYChange = 0.0f;
    marioZChange = 0.0f;
    if (w || a || s || d) {
      animate(run);
    }else {
      animate(idle);
    }
    animFrame +=1;
  // *** Camera Controls ***
      if (r) {
        camZoom -= 10;
      }
      if (f) {
        camZoom += 10;
      }
      camX = marioX;
      camY = marioY-400;
      camZ = marioZ - camZoom;
      if (cameraMode == 'z') {
        if (!cameraBypass) {
          cameraYRot = marioRot-90;
        }
        camX = (cos(radians(cameraYRot))*camZoom)+marioX;
        camZ = (sin(radians(cameraYRot))*camZoom)+marioZ;
      }else if (cameraMode == 'x') {
        if (!cameraBypass) {
          cameraYRot = marioRot;
        }
        camX = (cos(radians(cameraYRot))*camZoom)+marioX;
        camZ = (sin(radians(cameraYRot))*camZoom)+marioZ;
      }else if (cameraMode == 'c') {
        if (!cameraBypass) {
          cameraYRot = marioRot-180;
        }
        camX = (cos(radians(cameraYRot))*camZoom)+marioX;
        camZ = (sin(radians(cameraYRot))*camZoom)+marioZ;
      }
      camera(camX, camY, camZ, // eyeX, eyeY, eyeZ
        marioX, marioY, marioZ, // centerX, centerY, centerZ
        0.0f, 1.0f, 0.0f); // upX, upY, upZ

  // ***Moving Mario***
    marioShadowBox.x = marioX;
    marioShadowBox.y = marioY+marioShadowBox.sizeY/2;
    marioShadowBox.z = marioZ;
    //marioShadowBox.create();
    pushMatrix();
    translate(marioX, marioY, marioZ);
    println("Mario is at:", marioX, marioY, marioZ, "; facing:", marioRot);
    scale(100);
    rotateZ(PI);
    rotateY(radians(marioRot));
    noStroke();
    fill(0);
    //box(5, 0, 5);
    fill(255);
    stroke(0);
    shape(mario);
    popMatrix();
    
    oldMarioX = marioX;
    oldMarioY = marioY;
    oldMarioZ = marioZ;

    oldMarioRot = marioRot;

    oldCameraRot = cameraRot;

    //println("Running at", frameRate, "fps");
  

}

//#### My Functions ####//

//Checks if mario should be able to move, if so moves him
 public void move(char WASD, Objects[] currentLevel){
  float[] changes = new float[0];
  float xChange;
  float zChange;
  float yChange;
  changes = moveCalc(WASD, marioRot, currentLevel);
  xChange = changes[1];
  yChange = changes[2];
  zChange = changes[0];

  marioXChange += xChange;
  marioYChange -= yChange;
  marioZChange += zChange;


}

//Calculates mario's movement. Implemented to make sure 'W' always moves mario forward, relative to mario's direction
 public float[] moveCalc(char WASD, float currentRot, Objects[] currentLevel){
  boolean jumping = false;
  float tempRot = currentRot; 
  float[] moves = new float[3];
  if (WASD == 'w'){
    tempRot = currentRot;
  } else if (WASD == 'a') {
    tempRot = currentRot + 270;
  } else if (WASD == 's') {
    tempRot = currentRot + 180;
  } else if (WASD == 'd') {
    tempRot = currentRot + 90;
  } else if (WASD == ' ') {
    jumping = true;
    //println("Jumping");
    if (jumpTimer >= 1){
      //marioY -= 20;
      jumpTimer -= 1;
    }
  }
  if (jumping){
    moves[0] = 0;
    moves[1] = 0;
    moves[2] = 15;
    //println("jumping");
  }else{
    moves[0] = round(15*cos(radians(tempRot))); // Z
    moves[1] = round(-15*sin(radians(tempRot))); // X
    moves[2] = 0; // Y
    //println("Moving by", moves[0], moves[1]);
  }
  return moves;
  
}

// pulls mario back down. returns true if Mario is on the ground
 public boolean gravity(Objects[] currentLevel){
  if (!collision(currentLevel, 0, -G, 0)){
    marioY += G;
    if (marioY >= 700) {
      marioY = 0;
      marioX = 0;
      marioZ = 0;
    }
    return false;
  }else{
    return true;
  }
}

 public void launch(){
  int levelSelect;
  if (startLaunch) {
    launchSound.play();
    marioRot = 0;
    spinTimer = 0;
    initY = marioY;
    startLaunch = false;
  }else if (marioY <= (initY-500)) {
    activeLevel.theme.stop();
    levelSelect = PApplet.parseInt(random(0,4));
    switch (levelSelect) {
      case 0 :
        yoshiLevel.newLevel = true;
        activeLevel = yoshiLevel;
      break;	
      case 1 :
        lavaLevel.newLevel = true; 
        activeLevel = lavaLevel;
      break;
      case 2 :
        clockLevel.newLevel = true; 
        activeLevel = clockLevel;
      break;
      case 3 :
        duneLevel.newLevel = true; 
        activeLevel = duneLevel;
      break;
    }
    marioX = 0.0f;
    marioY = 0.0f;
    marioZ = 0.0f;
    launching = false;
  }else {
    marioY -= 100;
  }
}

//used to check if moving objects will hit mario. Returns how much mario's X, Y, and Z should be offset by
 public boolean objCollision(Objects[] movingStuff){;
  float xPush = 0.0f;
  float yPush = 0.0f;
  float zPush = 0.0f;
  Objects tempObj;
  Objects[] closeStuff = new Objects[0];
  for (int i = 0; i < movingStuff.length; i++) {
    if (dist(movingStuff[i].x, movingStuff[i].y, movingStuff[i].z, marioX, marioY, marioZ) <=1000) {
      tempObj = movingStuff[i];
      closeStuff = (Objects[]) append(closeStuff, tempObj); //SOME DOCS ON THIS WOULD BE NICE, PROCESSING! AHHHHHHH! Oh, wait, it's right there
    }
  }
  //println("Moving close stuff:", closeStuff.length);
  for (int i = 0; i < closeStuff.length; i++) {
    //println(closeStuff[i].shape);

      /*  
      //Display corners of Mario's hitbox
        pushMatrix();
        fill(255);
        //bottom corner
        translate(marioX-75, marioY-175, marioZ-37.5);
        sphere(5);
        popMatrix();
        pushMatrix();
        fill(255);
        //top corner
        translate(marioX+75, marioY, marioZ+37.5);
        sphere(5);
        popMatrix();
      //display corners of Object's hitbox
        pushMatrix();
        fill(255);
        //top corner
        translate(closeStuff[i].tCornX, closeStuff[i].tCornY, closeStuff[i].tCornZ);
        sphere(5);
        popMatrix();
        pushMatrix();
        fill(255);
        //bottom corner
        translate(closeStuff[i].bCornX, closeStuff[i].bCornY, closeStuff[i].bCornZ);
        sphere(5);
        popMatrix();


      
      println(marioX-75, "<=", closeStuff[i].bCornX, "&&", marioX+75, ">=", closeStuff[i].tCornX);
      println(marioY-175, "<=", closeStuff[i].bCornY, "&&", marioY, ">=", closeStuff[i].tCornY);
      println(marioZ-37.5, "<=", closeStuff[i].bCornZ, "&&", marioZ+37.5, ">=", closeStuff[i].tCornZ);
      */
      if ( (marioX-75 <= closeStuff[i].bCornX && marioX+75 >= closeStuff[i].tCornX) &&
          (marioY-175 <= closeStuff[i].bCornY && marioY >= closeStuff[i].tCornY) &&
          (marioZ-37.5f <= closeStuff[i].bCornZ && marioZ+37.5f >= closeStuff[i].tCornZ) ) {
        //println("Collision");

        xPush += closeStuff[i].movedX;
        yPush += closeStuff[i].movedY -G;
        println("Being Y Pushed:", yPush);
        zPush += closeStuff[i].movedZ;
        
      }
    }
    
    if ((xPush == 0.0f) && (yPush == 0.0f) && (zPush == 0.0f)) {
      return false;
    }else {
      marioXChange += xPush;
      marioYChange -= yPush;
      marioZChange += zPush;

      /*
      //!!!!!!!!!!!!!!!!!!!FIX THIS!!!!!!!!!!!!!!!!!!!!
      if (!collision(activeLevel.objects, xPush, 0, 0)) {
        marioX += xPush;
      }
      if (!collision(activeLevel.objects, 0, yPush, 0)) {
        marioY += yPush;
      }
      if (!collision(activeLevel.objects, xPush, 0, 0)) {
        marioZ += zPush;
      }
      */
      return true;
    }

}

// checks if the Max/Min of mario's hitbox is trying to overlap the Min/Max of any other object w/in 2000 pixels' hitbox
 public boolean collision(Objects[] levelStuff, float xMove, float yMove, float zMove){
  float propX = marioX + xMove;
  float propY = marioY - yMove;
  float propZ = marioZ + zMove;
  Objects tempObj;
  Objects[] closeStuff = new Objects[0];
  for (int i = 0; i < levelStuff.length; i++) {
    if (dist(levelStuff[i].x, levelStuff[i].y, levelStuff[i].z, propX, propY, propZ) <=2000) {
      tempObj = levelStuff[i];
      //println(i, levelStuff[i].getClass().getSimpleName(), levelStuff[i].shape);
      closeStuff = (Objects[]) append(closeStuff, tempObj); //SOME DOCS ON THIS WOULD BE NICE, PROCESSING! AHHHHHHH! Oh, wait, it's right there
    }
  }
  //println(closeStuff.length);
  for (int i = 0; i < closeStuff.length; i++) {
    //println(closeStuff[i].shape);
    if (closeStuff[i].shape == "launch") {
      //println("Near Launch Star!");
      if (dist(closeStuff[i].x,closeStuff[i].y,closeStuff[i].z,propX,propY,propZ)<=100) {
        nearStar = true;
      }
    }else if((closeStuff[i].shape == "box") || (closeStuff[i].shape == "movingBox")){

      //println("Mario's close to", closeStuff[i].shape, "at", closeStuff[i].x, closeStuff[i].y, closeStuff[i].z);
      
      //code for testing hitboxes
        /**
        //Display corners of Mario's hitbox
        pushMatrix();
        fill(255);
        //bottom corner
        translate(propX-75, propY-175, propZ-37.5);
        sphere(5);
        popMatrix();
        pushMatrix();
        fill(255);
        //top corner
        translate(propX+75, propY, propZ+37.5);
        sphere(5);
        popMatrix();
        
        //display corners of Object's hitbox
        pushMatrix();
        fill(255);
        //top corner
        translate(closeStuff[i].tCornX, closeStuff[i].tCornY, closeStuff[i].tCornZ);
        sphere(5);
        popMatrix();
        pushMatrix();
        fill(255);
        //bottom corner
        translate(closeStuff[i].bCornX, closeStuff[i].bCornY, closeStuff[i].bCornZ);
        sphere(5);
        popMatrix();
        
        println(propX-75 <= closeStuff[i].bCornX && propX+75 >= closeStuff[i].tCornX);
        println(propY, "<=", closeStuff[i].bCornY, "&&", propY-175, ">=", closeStuff[i].tCornY, (propY <= closeStuff[i].bCornY && propY-175 >= closeStuff[i].tCornY));
        println(propZ-37.5 <= closeStuff[i].bCornZ && propZ+37.5 >= closeStuff[i].tCornZ);
        */

      if ( (propX-75 <= closeStuff[i].bCornX && propX+75 >= closeStuff[i].tCornX) &&
          (propY-175 <= closeStuff[i].bCornY && propY >= closeStuff[i].tCornY) &&
          (propZ-37.5f <= closeStuff[i].bCornZ && propZ+37.5f >= closeStuff[i].tCornZ) ) {
        //println("Collision");
        return true;
      }
    }
  }
  return false;

}

 public void animate(PShape[] animSet){
  if (animFrame > animSet.length-1) {
    animFrame = 0;
  }
    mario = animSet[animFrame];
}


//#### Event Functions ####//
 public void keyPressed() {
  if (key == 'w') {
    w = true;
  }
  if (key == 'a') {
    a = true;
  }
  if (key == 's') {
    s = true;
  }
  if (key == 'd') {
    d = true;
  }
  if (key == 'q') {
    q = true;
  }
  if (key == 'e') {
    e = true;
  }
  if (key == ' ') {
    space = true;
  }
  if (key == 'v') {
    v = true;
  }
  if (key == 'z') {
    cameraMode = 'z';
  }
  if (key == 'x') {
    cameraMode = 'x';
  }
  if (key == 'c') {
    cameraMode = 'c';
  }
  if (key == 'r') {
    r = true;
  }
  if (key == 'f') {
    f = true;
  }
  if (key == 't') {
    camZoom = 750;
  }
}

 public void keyReleased() {
  //println("Key Released!");
  if (key == 'w') {
    w = false;
  }
  if (key == 'a') {
    a = false;
  }
  if (key == 's') {
    s = false;
  }
  if (key == 'd') {
    d = false;
  }
  if (key == 'q') {
    q = false;
  }
  if (key == 'e') {
    e = false;
  }
  if (key == ' ') {
    space = false;
  }
  if (key == 'r') {
    r = false;
  }
  if (key == 'f') {
    f = false;
  }
}



public class Levels {
    Objects[] objects;
    SoundFile theme;
    PImage skybox;
    boolean newLevel = true;
    public Levels (Objects[] levelObjs, SoundFile levelTheme, PImage background) {
        objects = levelObjs;
        theme = levelTheme;
        skybox = background;
    }

    public Objects[] loadLevel(){
        //println("loading");
        Objects[] moving = new Objects[0];
        if (newLevel) {
            theme.loop();
            newLevel = false;
        }
        for (Objects i : objects) {
            i.create();
            if (i.moving) {
                moving = (Objects[]) append(moving, i);
                
            }
        }
        return moving;
    }


}
//In my defense, I didn't know there was a Java type called 'Object'
public class Objects{
    String shape;
    String path;    //refers to file path for objects. NOT CURVE of moving boxes
    PShape obj;
    boolean moving;
    float speed;
    float progress;
    String direction;

    float x;
    float y;
    float z;

    float oldX;     //position on previous frame. Used for moving objects to update push vales for Matio
    float oldY;
    float oldZ;

    float movedX;   //amount moved from previous frame. Used for moving objects to update push vales for Matio
    float movedY;
    float movedZ;


    float tCornX;   // top corner pos. used for collision
    float tCornY;
    float tCornZ;

    float bCornX;   // bottom corner pos. used for collision
    float bCornY;
    float bCornZ;

                    //Curve params for moving boxes and sling stars (latter NYI)
    float p1X;      //vertex 1
    float p1Y;
    float p1Z;

    float p2X;      //Control Point 1
    float p2Y;
    float p2Z;

    float p3X;      //Control Point 2
    float p3Y;
    float p3Z;

    float p4X;      //vertex 2
    float p4Y;
    float p4Z;

    float sizeX;
    float sizeY;
    float sizeZ;

    float cenX;     // center of object. Used for loaded objs
    float cenY;
    float cenZ;

    //box constructor
                                    // Note: The given X,Y,Z coords/sizes are set to be scaled from Blender (this includes axis changes)
    public Objects (String shapeType, float xPos, float yPos, float zPos, float shapeSizeX, float shapeSizeY, float shapeSizeZ) {
        shape = shapeType;
        x = -1*(xPos*30);
        y = -1*(zPos*30);
        z = yPos*30;
        sizeX = shapeSizeX*30;
        sizeY = shapeSizeZ*30;
        sizeZ = shapeSizeY*30;
        tCornX = x - (sizeX/2);
        tCornY = y - (sizeY/2);
        tCornZ = z - (sizeZ/2);

        bCornX = x + (sizeX/2);
        bCornY = y + (sizeY/2);
        bCornZ = z + (sizeZ/2);
    }
    //movingBox constructor
                                                        // Note: The given X,Y,Z coords/sizes are set to be scaled from Blender (this includes axis changes)
    public Objects (String shapeType, float moveSpeed, float[] curveParams, float shapeSizeX, float shapeSizeY, float shapeSizeZ) {
        shape = shapeType;
        moving = true;
        speed = moveSpeed; // > = slower, < = faster (1/speed)
        progress = 0; //++1 until == speed, then --1 until == 0 
        x = -1*(curveParams[0]*30);
        y = -1*(curveParams[2]*30);
        z = curveParams[1]*30;
        sizeX = shapeSizeX*30;
        sizeY = shapeSizeZ*30;
        sizeZ = shapeSizeY*30;
        tCornX = x - (sizeX/2);
        tCornY = y - (sizeY/2);
        tCornZ = z - (sizeZ/2);

        bCornX = x + (sizeX/2);
        bCornY = y + (sizeY/2);
        bCornZ = z + (sizeZ/2);

        //Note: I pass the curve params in the constructor as p1, p2, p3, p4. curve() wants them as p2, p1, p3, p4
        p1X = -1*(curveParams[0]*30);
        p1Y = -1*(curveParams[2]*30);
        p1Z = curveParams[1]*30;
        
        p2X = -1*(curveParams[3]*30);
        p2Y = -1*(curveParams[5]*30);
        p2Z = curveParams[4]*30;

        p3X = -1*(curveParams[6]*30);
        p3Y = -1*(curveParams[8]*30);
        p3Z = curveParams[7]*30;

        p4X = -1*(curveParams[9]*30);
        p4Y = -1*(curveParams[11]*30);
        p4Z = curveParams[10]*30;
    }
    //geom constructor. Mostly implemented. Big issue is reverse engeneering how processing calculates the default, top-left corner of an obj, because it's often wrong...
    public Objects (String shapeType, String objName, float xPos, float yPos, float zPos, float shapeSizeX, float shapeSizeY, float shapeSizeZ) {
        shape = shapeType;
        path = objName;
        x = -1*(xPos*30);
        y = -1*(zPos*30);
        z = yPos*30;
        sizeX = shapeSizeX*30;
        sizeY = shapeSizeZ*30;
        sizeZ = shapeSizeY*30;

    }

    //Launch Star constructor. Still do not know how Processing does the origin, but this seems to just work...
    public Objects (String shapeType, float xPos, float yPos, float zPos) {
        shape = shapeType;
        path = "launch.obj";
        x = -1*(xPos*30);
        y = -1*(zPos*30);
        z = yPos*30;

        sizeX = 13.6f*30;
        sizeY = 13.1f*30;
        sizeZ = 0.967f*30;



    }
        public boolean loadObj(){
            if ((shape == "box") || (shape == "movingBox")) {
                return false; // this should never return as such, as it's currently a manual call. Implemented if I ever need dynamic calls
            }else{
                obj = loadShape(path);
                return true;
            }
        }

        public void create(){
            //println("Creating a", shape, "at", x,y,z);
            if (shape == "box"){
                pushMatrix();
                translate(x, y, z);
                box(sizeX, sizeY, sizeZ);
                popMatrix();
            }else if (shape == "hitBox"){
                pushMatrix();
                noFill();
                //noStroke();
                translate(x, y, z);
                box(sizeX, sizeY, sizeZ);
                fill(255);
                stroke(0);
                popMatrix();
            } else if (shape == "geom") {
                //println("loading", path, "at", x,y,z, "of size", sizeX, sizeY, sizeZ);
                pushMatrix();
                translate(x, y, z);
                scale(30, 30, 30);
                //rotateZ(PI);
                shape(obj);
                popMatrix();

                pushMatrix();
                fill(255);
                translate(x,y,z);
                scale(30,30,30);
                sphere(5);
                popMatrix();
            } else if (shape == "launch") {
                pushMatrix();
                translate(x, y, z);
                scale(30, 30, 30);
                rotateZ(PI);
                rotateY(PI);
                shape(obj);
                popMatrix();
            }else if (shape == "movingBox") {
                if (progress >= speed) { // should never be >, but contingency
                    direction = "backwards";
                }else if (progress <= 0) {
                    direction = "forwards";
                }
                if (direction == "forwards") {
                    progress +=1;
                }else if (direction == "backwards") {
                    progress -=1;
                }
                oldX = x;
                oldY = y;
                oldZ = z;

                x = curvePoint(p2X, p1X, p3X, p4X, (progress/speed));
                y = curvePoint(p2Y, p1Y, p3Y, p4Y, (progress/speed));
                z = curvePoint(p2Z, p1Z, p3Z, p4Z, (progress/speed));

                movedX = x - oldX;
                movedY = y - oldY;
                movedZ = z - oldZ;

                tCornX = x - (sizeX/2);
                tCornY = y - (sizeY/2);
                tCornZ = z - (sizeZ/2);

                bCornX = x + (sizeX/2);
                bCornY = y + (sizeY/2);
                bCornZ = z + (sizeZ/2);
                pushMatrix();
                noFill();
                //Note: curve() wants them as p2, p1, p3, p4
                curve(p2X, p2Y, p2Z, p1X, p1Y, p1Z, p3X, p3Y, p3Z, p4X, p4Y, p4Z);
                fill(255);
                popMatrix();
                pushMatrix();
                translate(x, y, z);
                box(sizeX, sizeY, sizeZ);
                popMatrix();
                
            }
        }


}


  public void settings() { size(1000, 700, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ProjectB" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
